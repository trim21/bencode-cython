name: Reusable workflow example

on:
  workflow_call:

jobs:
  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.1
      with:
        submodules: true  # Optional, use if you have submodules

    - name: Build SDist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v4.3.1
      with:
        name: 'wheels-sdist'
        path: dist/*.tar.gz

  build_wheels:
    name: Build manylinux wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: macos-latest, arch: x86_64, build: "*" }
          - { os: macos-latest, arch: arm64, build: "*" }
          - { os: windows-latest, arch: AMD64, build: "*" }
          - { os: windows-latest, arch: x86, build: "*" }
          - { os: ubuntu-latest, arch: x86_64, build: "*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[61]-manylinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[72]-manylinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[83]-manylinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[94]-manylinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[05]-manylinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[61]-musllinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[72]-musllinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[83]-musllinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[94]-musllinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[05]-musllinux*" }

    steps:
      - uses: docker/setup-qemu-action@v3
        if: matrix.os == 'ubuntu-latest'

      - uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD: ${{ matrix.build }}

      - uses: actions/upload-artifact@v4
        with:
          name: 'wheels-${{ matrix.os }}-${{ matrix.python-version }}'
          path: ./wheelhouse/*.whl


  merge-wheel-artifact:
    runs-on: ubuntu-latest
    needs: [ 'build_wheels' ]
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: wheel
          pattern: wheels-*

  check_dist:
    name: Check dist
    needs: [make_sdist, merge-wheel-artifact]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.1.4
        with:
          name: wheel
          path: dist

      - run: pipx run twine check --strict dist/*
