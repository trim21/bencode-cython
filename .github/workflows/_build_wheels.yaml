name: Reusable workflow example

on:
  workflow_call:

jobs:
  build_wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: macos-12, arch: x86_64, build: "*" }
          - { os: macos-12, arch: arm64, build: "*" }
          - { os: windows-latest, arch: AMD64, build: "*" }
          - { os: ubuntu-latest, arch: x86_64, build: "*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[61]-manylinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[72]-manylinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[83]-manylinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[94]-manylinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[05]-manylinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[61]-musllinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[72]-musllinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[83]-musllinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[94]-musllinux*" }
          - { os: ubuntu-latest, arch: aarch64, build: "*[05]-musllinux*" }
    steps:
      - uses: docker/setup-qemu-action@v3
        if: matrix.os == 'ubuntu-latest'

      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Restore cached Primes
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\pypa\cibuildwheel\Cache
            ~/Library/Caches/cibuildwheel
            ~/.cache/cibuildwheel
          key: 'cibuildwheel-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.build }}'
          restore-keys: |
            cibuildwheel-${{ runner.os }}-${{ matrix.arch }}

      - uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_FREE_THREADED_SUPPORT: true
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_SKIP: 'pp*'
          MACOSX_DEPLOYMENT_TARGET: '10.13'

      - run: ls ./wheelhouse/

      - uses: actions/upload-artifact@v4
        with:
          name: 'wheels-${{ runner.os }}-${{ matrix.arch }}-${{ strategy.job-index }}'
          path: ./wheelhouse/*.whl

  build:
    name: make sdist and wheel
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - run: pipx run build
      env:
        PY_BENCODE2_PURE_PYTHON: '1'

    - uses: actions/upload-artifact@v4
      with:
        name: 'wheels-dist'
        path: dist/*
